{"version":3,"file":"core.umd.min.js","sources":["../../../../.temp/packages/@ngx-meta/core/src/util.ts","../../../../.temp/packages/@ngx-meta/core/index.ts","../../../../.temp/packages/@ngx-meta/core/src/models/page-title-positioning.ts","../../../../.temp/packages/@ngx-meta/core/src/meta.loader.ts","../../../../.temp/packages/@ngx-meta/core/src/meta.service.ts","../../../../.temp/packages/@ngx-meta/core/src/meta.guard.ts"],"sourcesContent":["// libs\r\n\nimport { Observable } from 'rxjs/Observable';\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isPromise(obj: any): obj is Promise<any> {\r\n  return !!obj && typeof obj.then === 'function';\r\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\r\n  // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved\r\n  // return !!(obj && obj[symbolObservable]);\r\n  return !!obj && typeof obj.subscribe === 'function';\r\n}\r\n","// angular\r\n\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n// module\r\n\nimport { MetaGuard } from './src/meta.guard';\r\nimport { MetaLoader, MetaStaticLoader } from './src/meta.loader';\r\nimport { MetaService } from './src/meta.service';\r\n\r\nexport {MetaSettings} from './src/models/meta-settings';\r\nexport {PageTitlePositioning} from './src/models/page-title-positioning';\r\nexport {MetaGuard} from './src/meta.guard';\r\nexport {MetaLoader,MetaStaticLoader} from './src/meta.loader';\r\nexport {MetaService} from './src/meta.service';\n/**\n * @return {?}\n */\nexport function metaFactory(): MetaLoader {\r\n  return new MetaStaticLoader();\r\n}\nexport class MetaModule {\n/**\n * @param {?=} configuredProvider\n * @return {?}\n */\nstatic forRoot(configuredProvider: any = {\r\n    provide: MetaLoader,\r\n    useFactory: (metaFactory)\r\n  }): ModuleWithProviders {\r\n    return {\r\n      ngModule: MetaModule,\r\n      providers: [\r\n        configuredProvider,\r\n        MetaGuard,\r\n        MetaService\r\n      ]\r\n    };\r\n  }\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: MetaModule) {\r\n    if (parentModule)\r\n      throw new Error('MetaModule already loaded; import in root module only.');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MetaModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MetaModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMetaModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMetaModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type PageTitlePositioning = number;\nexport let PageTitlePositioning: any = {};\nPageTitlePositioning.AppendPageTitle = 0;\nPageTitlePositioning.PrependPageTitle = 10;\nPageTitlePositioning[PageTitlePositioning.AppendPageTitle] = \"AppendPageTitle\";\nPageTitlePositioning[PageTitlePositioning.PrependPageTitle] = \"PrependPageTitle\";\n\r\n","// module\r\n\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\nimport { MetaSettings } from './models/meta-settings';\n/**\n * @abstract\n */\nexport abstract class MetaLoader {\n/**\n * @abstract\n * @return {?}\n */\nsettings() {}\r\n}\nexport class MetaStaticLoader implements MetaLoader {\n/**\n * @return {?}\n */\nget settings(): MetaSettings {\r\n    return this.providedSettings;\r\n  }\n/**\n * @param {?=} providedSettings\n */\nconstructor(private readonly providedSettings: MetaSettings = {\r\n    pageTitlePositioning: PageTitlePositioning.PrependPageTitle,\r\n    defaults: {}\r\n  }) {\r\n  }\r\n}\n\nfunction MetaStaticLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nMetaStaticLoader.prototype.providedSettings;\n}\n\r\n","// angular\r\n\nimport { Injectable } from '@angular/core';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\n\r\n// libs\r\n\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/observable/of';\r\nimport'rxjs/add/observable/fromPromise';\r\n\r\n// module\r\n\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\nimport { MetaLoader } from './meta.loader';\r\nimport { isObservable, isPromise } from './util';\r\nimport { MetaSettings } from './models/meta-settings';\nexport class MetaService {\r\n  protected readonly settings: MetaSettings;\nprivate readonly isMetaTagSet: any;\n/**\n * @param {?} loader\n * @param {?} title\n * @param {?} meta\n */\nconstructor(public readonly loader: MetaLoader,\nprivate readonly title: Title,\nprivate readonly meta: Meta) {\r\n    this.settings = loader.settings;\r\n    this.isMetaTagSet = {};\r\n  }\n/**\n * @param {?} title\n * @param {?=} override\n * @return {?}\n */\nsetTitle(title: string, override = false): void {\r\n    const /** @type {?} */ title$ = title\r\n      ? this.callback(title)\r\n      : Observable.of('');\r\n\r\n    title$\r\n      .subscribe((res: string) => {\r\n        let /** @type {?} */ fullTitle = '';\r\n\r\n        if (!res) {\r\n          const /** @type {?} */ defaultTitle$ = (this.settings.defaults && this.settings.defaults['title'])\r\n            ? this.callback(this.settings.defaults['title'])\r\n            : Observable.of('');\r\n\r\n          defaultTitle$\r\n            .subscribe((defaultTitle: string) => {\r\n              if (!override && this.settings.pageTitleSeparator && this.settings.applicationName)\r\n                this.callback(this.settings.applicationName)\r\n                  .subscribe((applicationName: string) => {\r\n                    fullTitle = applicationName ? this.getTitleWithPositioning(defaultTitle, applicationName) : defaultTitle;\r\n                    this.updateTitle(fullTitle);\r\n                  });\r\n              else\r\n                this.updateTitle(defaultTitle);\r\n            });\r\n        } else if (!override && this.settings.pageTitleSeparator && this.settings.applicationName)\r\n          this.callback(this.settings.applicationName)\r\n            .subscribe((applicationName: string) => {\r\n              fullTitle = applicationName ? this.getTitleWithPositioning(res, applicationName) : res;\r\n              this.updateTitle(fullTitle);\r\n            });\r\n        else\r\n          this.updateTitle(res);\r\n      });\r\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nsetTag(key: string, value: string): void {\r\n    if (key === 'title')\r\n      throw new Error(`Attempt to set ${key} through \"setTag\": \"title\" is a reserved tag name. `\r\n        + 'Please use `MetaService.setTitle` instead.');\r\n\r\n    value = value || ((this.settings.defaults && this.settings.defaults[key])\r\n      ? this.settings.defaults[key]\r\n      : '');\r\n\r\n    const /** @type {?} */ value$ = (key !== 'og:locale' && key !== 'og:locale:alternate')\r\n      ? this.callback(value)\r\n      : Observable.of(value);\r\n\r\n    value$\r\n      .subscribe((res: string) => {\r\n        this.updateTag(key, res);\r\n      });\r\n  }\n/**\n * @param {?} currentUrl\n * @param {?=} metaSettings\n * @return {?}\n */\nupdate(currentUrl: string, metaSettings?: any): void {\r\n    if (!metaSettings) {\r\n      const /** @type {?} */ fallbackTitle = this.settings.defaults\r\n        ? (this.settings.defaults['title'] || this.settings['applicationName'])\r\n        : this.settings['applicationName'];\r\n\r\n      this.setTitle(fallbackTitle, true);\r\n    } else {\r\n      if (metaSettings.disabled) {\r\n        this.update(currentUrl);\r\n\r\n        return;\r\n      }\r\n\r\n      this.setTitle(metaSettings.title, metaSettings.override);\r\n\r\n      Object.keys(metaSettings)\r\n        .forEach(key => {\r\n          let /** @type {?} */ value = metaSettings[key];\r\n\r\n          if (key === 'title' || key === 'override')\r\n            return;\r\n          else if (key === 'og:locale')\r\n            value = value.replace(/-/g, '_');\r\n          else if (key === 'og:locale:alternate') {\r\n            const /** @type {?} */ currentLocale = metaSettings['og:locale'];\r\n            this.updateLocales(currentLocale, metaSettings[key]);\r\n\r\n            return;\r\n          }\r\n\r\n          this.setTag(key, value);\r\n        });\r\n    }\r\n\r\n    if (this.settings.defaults)\r\n      Object.keys(this.settings.defaults)\r\n        .forEach(key => {\r\n          let /** @type {?} */ value = this.settings.defaults[key];\r\n\r\n          if ((metaSettings && (key in this.isMetaTagSet || key in metaSettings)) || key === 'title' || key === 'override')\r\n            return;\r\n          else if (key === 'og:locale')\r\n            value = value.replace(/-/g, '_');\r\n          else if (key === 'og:locale:alternate') {\r\n            const /** @type {?} */ currentLocale = metaSettings ? metaSettings['og:locale'] : undefined;\r\n            this.updateLocales(currentLocale, value);\r\n\r\n            return;\r\n          }\r\n\r\n          this.setTag(key, value);\r\n        });\r\n\r\n    const /** @type {?} */ url = ((this.settings.applicationUrl || '/') + currentUrl)\r\n      .replace(/(https?:\\/\\/)|(\\/)+/g, '$1$2')\r\n      .replace(/\\/$/g, '');\r\n\r\n    this.setTag('og:url', url || '/');\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate callback(value: string): Observable<string> {\r\n    if (this.settings.callback) {\r\n      const /** @type {?} */ value$ = this.settings.callback(value);\r\n\r\n      if (!isObservable(value$))\r\n        return isPromise(value$)\r\n          ? Observable.fromPromise(value$)\r\n          : Observable.of(value$);\r\n\r\n      return value$;\r\n    }\r\n\r\n    return Observable.of(value);\r\n  }\n/**\n * @param {?} title\n * @param {?} applicationName\n * @return {?}\n */\nprivate getTitleWithPositioning(title: string, applicationName: string): string {\r\n    switch (this.settings.pageTitlePositioning) {\r\n      case PageTitlePositioning.AppendPageTitle:\r\n        return applicationName + this.settings.pageTitleSeparator + title;\r\n      case PageTitlePositioning.PrependPageTitle:\r\n        return title + this.settings.pageTitleSeparator + applicationName;\r\n      default:\r\n        throw new Error(`Invalid pageTitlePositioning specified [${this.settings.pageTitlePositioning}]!`);\r\n    }\r\n  }\n/**\n * @param {?} title\n * @return {?}\n */\nprivate updateTitle(title: string): void {\r\n    this.title.setTitle(title);\r\n    this.meta.updateTag({\r\n      property: 'og:title',\r\n      content: title\r\n    });\r\n  }\n/**\n * @param {?} currentLocale\n * @param {?} availableLocales\n * @return {?}\n */\nprivate updateLocales(currentLocale: string, availableLocales: string): void {\r\n    currentLocale = currentLocale || (this.settings.defaults\r\n      ? this.settings.defaults['og:locale']\r\n      : '');\r\n\r\n    if (currentLocale && this.settings.defaults)\r\n      this.settings.defaults['og:locale'] = currentLocale.replace(/_/g, '-');\r\n\r\n    // TODO: set HTML lang attribute - https://github.com/ngx-meta/core/issues/32\r\n    // const html = this.document.querySelector('html');\r\n    // html.setAttribute('lang', currentLocale);\r\n\r\n    const /** @type {?} */ elements = this.meta.getTags('property=\"og:locale:alternate\"');\r\n\r\n    elements.forEach((element: any) => {\r\n      this.meta.removeTagElement(element);\r\n    });\r\n\r\n    if (currentLocale && availableLocales)\r\n      availableLocales.split(',')\r\n        .forEach((locale: string) => {\r\n          if (currentLocale.replace(/-/g, '_') !== locale.replace(/-/g, '_'))\r\n            this.meta.addTag({\r\n              property: 'og:locale:alternate',\r\n              content: locale.replace(/-/g, '_')\r\n            });\r\n        });\r\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate updateTag(key: string, value: string): void {\r\n    if (key.lastIndexOf('og:', 0) === 0)\r\n      this.meta.updateTag({\r\n        property: key,\r\n        content: key === 'og:locale' ? value.replace(/-/g, '_') : value\r\n      });\r\n    else\r\n      this.meta.updateTag({\r\n        name: key,\r\n        content: value\r\n      });\r\n\r\n    this.isMetaTagSet[key] = true;\r\n\r\n    if (key === 'description')\r\n      this.meta.updateTag({\r\n        property: 'og:description',\r\n        content: value\r\n      });\r\n    else if (key === 'author')\r\n      this.meta.updateTag({\r\n        property: 'og:author',\r\n        content: value\r\n      });\r\n    else if (key === 'publisher')\r\n      this.meta.updateTag({\r\n        property: 'og:publisher',\r\n        content: value\r\n      });\r\n    else if (key === 'og:locale') {\r\n      const /** @type {?} */ availableLocales = this.settings.defaults\r\n        ? this.settings.defaults['og:locale:alternate']\r\n        : '';\r\n\r\n      this.updateLocales(value, availableLocales);\r\n      this.isMetaTagSet['og:locale:alternate'] = true;\r\n    } else if (key === 'og:locale:alternate') {\r\n      const /** @type {?} */ currentLocale = this.meta.getTag('property=\"og:locale\"').content;\r\n\r\n      this.updateLocales(currentLocale, value);\r\n      this.isMetaTagSet['og:locale'] = true;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MetaLoader, },\n{type: Title, },\n{type: Meta, },\n];\n}\n\nfunction MetaService_tsickle_Closure_declarations() {\n/** @type {?} */\nMetaService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMetaService.ctorParameters;\n/** @type {?} */\nMetaService.prototype.settings;\n/** @type {?} */\nMetaService.prototype.isMetaTagSet;\n/** @type {?} */\nMetaService.prototype.loader;\n/** @type {?} */\nMetaService.prototype.title;\n/** @type {?} */\nMetaService.prototype.meta;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// angular\r\n\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot } from '@angular/router';\r\n\r\n// module\r\n\nimport { MetaService } from './meta.service';\nexport class MetaGuard implements CanActivate, CanActivateChild {\n/**\n * @param {?} meta\n */\nconstructor(private readonly meta: MetaService) {\r\n  }\n/**\n * @param {?} route\n * @param {?} state\n * @return {?}\n */\ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const /** @type {?} */ url = state.url;\r\n\r\n    const /** @type {?} */ metaSettings = (route && route.data && route.data['meta'])\r\n      ? route.data['meta']\r\n      : undefined;\r\n\r\n    this.meta.update(url, metaSettings);\r\n\r\n    return true;\r\n  }\n/**\n * @param {?} route\n * @param {?} state\n * @return {?}\n */\ncanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    return this.canActivate(route, state);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MetaService, },\n];\n}\n\nfunction MetaGuard_tsickle_Closure_declarations() {\n/** @type {?} */\nMetaGuard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMetaGuard.ctorParameters;\n/** @type {?} */\nMetaGuard.prototype.meta;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["obj","then","subscribe","MetaStaticLoader","PageTitlePositioning","AppendPageTitle","PrependPageTitle","MetaLoader","providedSettings","pageTitlePositioning","defaults","this","Object","loader","title","meta","settings","isMetaTagSet","MetaService","override","callback","Observable","of","res","fullTitle","_this","pageTitleSeparator","applicationName","getTitleWithPositioning","updateTitle","defaultTitle","key","value","Error","updateTag","currentUrl","metaSettings","disabled","update","setTitle","keys","forEach","replace","currentLocale","updateLocales","setTag","fallbackTitle","undefined","url","applicationUrl","value$","isObservable","isPromise","fromPromise","property","content","availableLocales","getTags","element","removeTagElement","split","locale","addTag","lastIndexOf","name","getTag","type","Injectable","Title","Meta","MetaGuard","route","state","data","canActivate","parentModule","MetaModule","configuredProvider","provide","useFactory","ngModule","providers","NgModule","decorators","Optional","SkipSelf"],"mappings":"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"}